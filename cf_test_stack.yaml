AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  DynamoDbTableName:
    Type: String
    Default: test_visitor_counter
    Description: Enter DynamoDB table name that will be used for vistor counter. Default is test_counter.
Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          -
            PolicyName: DynamoDBAccessAndLogging
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                -
                  Sid: AllowLogging
                  Effect: Allow
                  Action:
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"
                -
                  Sid: ReadWriteFromVisitorCounterDynamoDBTable
                  Effect: Allow
                  Action:
                    - "dynamodb:ConditionCheckItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:GetShardIterator"
                    - "dynamodb:GetItem"
                    - "dynamodb:Scan"
                    - "dynamodb:Query"
                    - "dynamodb:UpdateItem"
                    - "dynamodb:DescribeStream"
                    - "dynamodb:GetRecords"
                  Resource: !GetAtt DynamoDBTable.Arn  
  DynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: 
        Ref: DynamoDbTableName
      AttributeDefinitions:
        - AttributeName: 'visitor_count'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'visitor_count'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'test_visitor_counter_lambda'
      Runtime: 'python3.9'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'crc-lambda-code-bucket'
        S3Key: 'test_visitor_counter_lambda.zip'
      Handler: 'lambda_function.lambda_handler'
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: 
            Ref: DynamoDbTableName
  VisitorCounterApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: VisitorCounterApi
      EndpointConfiguration: 
        Types:
          - REGIONAL     
  VisitorCounterResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref VisitorCounterApi
      ParentId: !GetAtt VisitorCounterApi.RootResourceId
      PathPart: visitorcounter
  VisitorCounterMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref VisitorCounterApi
      ResourceId: !Ref VisitorCounterResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
  VisitorCounterAPICors:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref VisitorCounterResource
      RestApiId: !Ref VisitorCounterApi
      Integration:
        Type: MOCK
  VisitorCounterAPICorsResponse:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      ResourceId: !Ref VisitorCounterResource
      RestApiId: !Ref VisitorCounterApi
      Integration:
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            "application/json": "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true 
  APIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Sub '${AWS::AccountId}'
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${VisitorCounterApi}/*" 

      